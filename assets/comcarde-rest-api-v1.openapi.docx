openapi: 3.0.1
info:
  title: BR-DGE REST API
  description: >
    This OpenAPI specification describes the parts of the **BR-DGE REST API** that your servers and
    client applications need to interact with when not using an SDK.


    ![Integration Overview Diagram](./integration-overview.png)


    **IMPORTANT In order to ensure [PCI Compliance](https://www.pcisecuritystandards.org/) please only
    use mock payment instrument data when interacting with our Sandbox API.**


    *Please see our [Client SDK documentation](https://secure.comcarde.com/v1/integration/docs/comcarde-sdks#client-sdks)
    for more information about how we can help you integrate you client applications with us.*
  version: v1
  contact:
    email: support@br-dge.to
servers:
  - url: https://sandbox.comcarde.com
    description: Sandbox subdomain for testing your integration works as expected, using mock payment instruments only
  - url: https://secure.comcarde.com
    description: Use this subdomain for processing live payments.
tags:
  - name: Payments
  - name: Payment Instrument Tokenization
    description: Convert payment instruments (cards, saved cards) into tokens
  - name: Merchant Server
    description: Operations intended for use by Merchant servers
  - name: Merchant Client Application
    description: Operations intended for use by Merchant client applications
externalDocs:
  description: For more information, please see our integration documentation.
  url: https://secure.comcarde.com/v1/integration/
paths:
  /v1/payments:
    post:
      tags:
        - Payments
        - Merchant Server
      summary: Request a transfer of funds between accounts at banks or other financial institutions.
      description: >
        Our systems will route this request to a Payment Service Provider, as configured by you.
      operationId: createPaymentUsingPOST
      security:
        - "ServerApiKey": []
      requestBody:
        description: Details of the payment to be initiated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
            examples:
              tokenized-payment:
                summary: Payment with Tokenized Payment Instrument.
                description: Tokenized payment instruments can be used in place of sensitive cardholder data.
                value: |
                  {
                    "amount": 1000,
                    "paymentInstrument": {
                      "type": "tokenized",
                      "token": "5caa5a2a-be0b-4160-ae21-1bbbf2267f4c"
                    },
                    "channel": "web",
                    "origin": "https://example.com/checkout",
                    "billingAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "browserData": {
                      "acceptHeader": "application/json",
                      "colorDepth": "32",
                      "javaEnabled": true,
                      "language": "EN_en",
                      "screenHeight": 768,
                      "screenWidth": 1024,
                      "timeZone": 800,
                      "userAgent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36"
                    },
                    "currencyCode": "GBP",
                    "customerEmail": "a@b.com",
                    "customerFirstName": "John",
                    "customerIpAddress": "123.100.100.200",
                    "customerLastName": "Smith",
                    "customerOrderCode": "ABC123",
                    "customerPhoneNumber": "+44 123 1110000",
                    "customerSessionId": "123456",
                    "deliveryAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "orderDescription": "Taxi fare",
                    "threeDSecureOptions": {
                      "challengeRequested": false,
                      "exemptionRequested": false
                    },
                    "threeDSecureRequired": true
                  }
              card-payment:
                summary: Payment with Card Payment Instrument
                value: |
                  {
                    "amount": 1000,
                    "paymentInstrument": {
                      "type": "card",
                      "nameOnCard": "John F Doe",
                      "pan": "4444 3333 2222 1111",
                      "expiryDate": "01-99",
                      "startDate": "01-00",
                      "issueNumber": 1,
                      "cv2": "000"
                    },
                    "channel": "ios",
                    "billingAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "browserData": {
                      "acceptHeader": "application/json",
                      "colorDepth": 32,
                      "javaEnabled": true,
                      "language": "EN_en",
                      "screenHeight": 768,
                      "screenWidth": 1024,
                      "timeZone": 800,
                      "userAgent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36"
                    },
                    "currencyCode": "GBP",
                    "customerEmail": "a@b.com",
                    "customerFirstName": "John",
                    "customerIpAddress": "123.100.100.200",
                    "customerLastName": "Smith",
                    "customerOrderCode": "ABC123",
                    "customerPhoneNumber": "+44 123 1110000",
                    "customerSessionId": "123456",
                    "deliveryAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "orderDescription": "Taxi fare",
                    "threeDSecureOptions": {
                      "challengeRequested": false,
                      "exemptionRequested": false
                    },
                    "threeDSecureRequired": true
                  }
              card-payment-create-saved-card:
                summary: Payment with Card Payment Instrument and Create Saved Card
                description: Please note that although 3D secure is not requested in this example, some PSPs will automatically apply 3D Secure to the first payment made with a saved card.
                value: |
                  {
                    "amount": 1000,
                    "paymentInstrument": {
                      "type": "card",
                      "nameOnCard": "John F Doe",
                      "pan": "4444 3333 2222 1111",
                      "expiryDate": "01-99",
                      "startDate": "01-00",
                      "issueNumber": 1,
                      "cv2": "000",
                      "tokenize": true
                    },
                    "channel": "ios",
                    "billingAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "browserData": {
                      "acceptHeader": "application/json",
                      "colorDepth": 32,
                      "javaEnabled": true,
                      "language": "EN_en",
                      "screenHeight": 768,
                      "screenWidth": 1024,
                      "timeZone": 800,
                      "userAgent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36"
                    },
                    "currencyCode": "GBP",
                    "customerEmail": "a@b.com",
                    "customerFirstName": "John",
                    "customerIpAddress": "123.100.100.200",
                    "customerLastName": "Smith",
                    "customerOrderCode": "ABC123",
                    "customerPhoneNumber": "+44 123 1110000",
                    "customerSessionId": "123456",
                    "deliveryAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "orderDescription": "Taxi fare",
                    "threeDSecureRequired": true
                  }
              paypal-payment:
                summary: Payment with PayPal Payment Instrument
                value: |
                  {
                    "amount": 1000,
                    "paymentInstrument": {
                      "type": "payPal",
                      "nonce": "XX#5caa5a2a-be0b-4160-ae21-1bbbf2267f4c"
                    },
                    "channel": "android",
                    "billingAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "browserData": {
                      "acceptHeader": "application/json",
                      "colorDepth": "32",
                      "javaEnabled": true,
                      "language": "EN_en",
                      "screenHeight": 768,
                      "screenWidth": 1024,
                      "timeZone": 800,
                      "userAgent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36"
                    },
                    "currencyCode": "GBP",
                    "customerEmail": "a@b.com",
                    "customerFirstName": "John",
                    "customerIpAddress": "123.100.100.200",
                    "customerLastName": "Smith",
                    "customerOrderCode": "ABC123",
                    "customerPhoneNumber": "+44 123 1110000",
                    "customerSessionId": "123456",
                    "deliveryAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "orderDescription": "Taxi fare",
                    "threeDSecureOptions": {
                      "challengeRequested": false,
                      "exemptionRequested": false
                    },
                    "threeDSecureRequired": true
                  }
              googlepay-payment:
                summary: Payment with GooglePay Payment Instrument
                value: |
                  {
                    "amount": 1000,
                    "paymentInstrument": {
                      "type": "googlePay",
                      "nonce": "XX#5caa5a2a-be0b-4160-ae21-1bbbf2267f4c"
                    },
                    "channel": "web",
                    "origin": "https://example.com/checkout",
                    "billingAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "browserData": {
                      "acceptHeader": "application/json",
                      "colorDepth": 32,
                      "javaEnabled": true,
                      "language": "EN_en",
                      "screenHeight": 768,
                      "screenWidth": 1024,
                      "timeZone": 800,
                      "userAgent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36"
                    },
                    "currencyCode": "GBP",
                    "customerEmail": "a@b.com",
                    "customerFirstName": "John",
                    "customerIpAddress": "123.100.100.200",
                    "customerLastName": "Smith",
                    "customerOrderCode": "ABC123",
                    "customerPhoneNumber": "+44 123 1110000",
                    "customerSessionId": 123456,
                    "deliveryAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "orderDescription": "Taxi fare",
                    "threeDSecureOptions": {
                      "challengeRequested": false,
                      "exemptionRequested": false
                    },
                    "threeDSecureRequired": true
                  }
              applepay-payment:
                summary: Payment with ApplePay Payment Instrument.
                value: |
                  {
                    "amount": 1000,
                    "paymentInstrument": {
                      "type": "applePay",
                      "nonce": "XX#5caa5a2a-be0b-4160-ae21-1bbbf2267f4c"
                    },
                    "channel": "ios",
                    "billingAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "browserData": {
                      "acceptHeader": "application/json",
                      "colorDepth": "32",
                      "javaEnabled": true,
                      "language": "EN_en",
                      "screenHeight": 768,
                      "screenWidth": 1024,
                      "timeZone": 800,
                      "userAgent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36"
                    },
                    "currencyCode": "GBP",
                    "customerEmail": "a@b.com",
                    "customerFirstName": "John",
                    "customerIpAddress": "123.100.100.200",
                    "customerLastName": "Smith",
                    "customerOrderCode": "ABC123",
                    "customerPhoneNumber": "+44 123 1110000",
                    "customerSessionId": "123456",
                    "deliveryAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "orderDescription": "Taxi fare",
                    "threeDSecureOptions": {
                      "challengeRequested": false,
                      "exemptionRequested": false
                    },
                    "threeDSecureRequired": true
                  }
              providerThreeDSecureNonce-payment:
                summary: Payment with ProviderThreeDSecureNonce Payment Instrument.
                description: >
                  Part of the 3-D Secure flow. In the event that you get a 3-D Secure additional
                  action required response to a payment request, you can use one of our
                  [Client SDKs](https://secure.comcarde.com/v1/integration/docs/comcarde-sdks#client-sdks)
                  to handle the action and convert it into a nonce you can use to complete the
                  payment with a ProviderThreeDSecureNonce Payment Instrument.


                  See <https://secure.comcarde.com/v1/integration/docs/3d-secure> for more information.
                value: |
                  {
                    "amount": 1000,
                    "paymentInstrument": {
                      "type": "providerThreeDSecureNonce",
                      "paymentId": "45951071-980e-45db-b3d4-5377655de82e",
                      "nonce": "XX#5caa5a2a-be0b-4160-ae21-1bbbf2267f4c"
                    },
                    "channel": "web",
                    "origin": "https://example.com/checkout",
                    "billingAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "browserData": {
                      "acceptHeader": "application/json",
                      "colorDepth": "32",
                      "javaEnabled": true,
                      "language": "EN_en",
                      "screenHeight": 768,
                      "screenWidth": 1024,
                      "timeZone": 800,
                      "userAgent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36"
                    },
                    "currencyCode": "GBP",
                    "customerEmail": "a@b.com",
                    "customerFirstName": "John",
                    "customerIpAddress": "123.100.100.200",
                    "customerLastName": "Smith",
                    "customerOrderCode": "ABC123",
                    "customerPhoneNumber": "+44 123 1110000",
                    "customerSessionId": "123456",
                    "deliveryAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "orderDescription": "Taxi fare",
                    "threeDSecureOptions": {
                      "challengeRequested": false,
                      "exemptionRequested": false
                    },
                    "threeDSecureRequired": true
                  }
              ideal-payment:
                summary: Payment with iDEAL Payment Instrument.
                description: >
                  Note that the success and error URLs should not be easily guessable.


                  By using unpredictable single-use URLs you can protect
                  yourself from the possibility of bad actors attempting to
                  make it appear that payments had a different outcome to reality.
                  We also recommend that you confirm the outcome of payments via
                  server-to-server calls to BR-DGE.
                value: |
                  {
                    "amount": 1000,
                    "paymentInstrument": {
                      "type": "ideal",
                      "successUrl": "https://myurl.com/success/f219ea52-d91f-4059-a560-8dd7cbd31fd0",
                      "errorUrl": "https://myurl.com/error/a73fba88-7874-4d2f-b946-27cfade80be0"
                    },
                    "channel": "ios",
                    "billingAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Edisonbaan",
                      "address2": "15 Apple Street",
                      "town": "Amsterdan",
                      "county": "Nieuwegein",
                      "postcode": "3439 MN",
                      "country": "NL"
                    },
                    "currencyCode": "EUR",
                    "customerEmail": "a@b.com",
                    "customerFirstName": "John",
                    "customerIpAddress": "123.100.100.200",
                    "customerLastName": "Smith",
                    "customerOrderCode": "ABC123",
                    "customerPhoneNumber": "+44 123 1110000",
                    "customerSessionId": "123456",
                    "deliveryAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "orderDescription": "Taxi fare"
                  }
              bancontact-payment:
                summary: Payment with Bancontact Payment Instrument.
                description: >
                  Note that the success and error URLs should not be easily guessable.


                  By using unpredictable single-use URLs you can protect
                  yourself from the possibility of bad actors attempting to
                  make it appear that payments had a different outcome to reality.
                  We also recommend that you confirm the outcome of payments via
                  server-to-server calls to BR-DGE.
                value: |
                  {
                    "amount": 1000,
                    "paymentInstrument": {
                      "type": "bancontact",
                      "successUrl": "https://myurl.com/success/f219ea52-d91f-4059-a560-8dd7cbd31fd0",
                      "errorUrl": "https://myurl.com/error/a73fba88-7874-4d2f-b946-27cfade80be0"
                    },
                    "channel": "ios",
                    "billingAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Chaussee de Wavre 1520",
                      "town": "Auderghem",
                      "county": "Brussels",
                      "postcode": "1160",
                      "country": "BE"
                    },
                    "currencyCode": "EUR",
                    "customerEmail": "a@b.com",
                    "customerFirstName": "John",
                    "customerIpAddress": "123.100.100.200",
                    "customerLastName": "Smith",
                    "customerOrderCode": "ABC123",
                    "customerPhoneNumber": "+44 123 1110000",
                    "customerSessionId": "123456",
                    "deliveryAddress": {
                      "firstName": "John",
                      "lastName": "Smith",
                      "buildingNumberOrName": "Flat 1",
                      "address1": "Victoria House",
                      "address2": "15 Apple Street",
                      "town": "Edinburgh",
                      "county": "Lothian",
                      "postcode": "BH23 6AA",
                      "country": "GB",
                      "phoneNumber": "+44 123 1110000"
                    },
                    "orderDescription": "Taxi fare"
                  }
        required: false
      responses:
        201:
          description: Payment request completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Successful payment:
                  value:
                    code: 1000
                    message: Approved
                    id: 4fad8e2e06a15656
                    paymentId: 22669f90-5bf0-45df-ba8c-ea6d4235a5da
                Successful payment with saved card created:
                  description: >
                    The token field contains a multi-use token representing the newly
                    created saved card
                  value:
                    code: 1000
                    message: Approved
                    id: 4fad8e2e06a15656
                    paymentId: 22669f90-5bf0-45df-ba8c-ea6d4235a5da
                    token: e2379d46-4fff-4e6f-b9af-6dab64877d60
                Successful payment with installments plan successfully activated:
                  description: >
                    The installmentsPlan field contains information about the outcome of the
                    activated installments plan
                  value:
                    code: 1000
                    message: Approved
                    id: 4fad8e2e06a15656
                    paymentId: 22669f90-5bf0-45df-ba8c-ea6d4235a5da
                    token: e2379d46-4fff-4e6f-b9af-6dab64877d60
                    installmentsPlan:
                      provider: Visa Installments
                      code: 1000
                      message: Approved
                      planActivationId: c58753d6-71b6-48e7-88d0-d383c0e03f69
          links:
            Get status of a Payment:
              operationId: getPaymentStatusUsingGET
              parameters:
                paymentId: '$response.body#/paymentId'
              description: >
                The `paymentId` value returned in the response can be used as
                the `paymentId` parameter in `GET /payments/{paymentId}/status`.
            Refund a Payment:
              operationId: createRefundUsingPOST
              parameters:
                paymentId: '$response.body#/paymentId'
              description: >
                The `paymentId` value returned in the response can be used as
                the `paymentId` parameter in `POST /payments/{paymentId}/refund`.
        202:
          description: Payment requires further action before it can continue,
            e.g. 3D Secure authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Further action required to make 3D Secure payment:
                  value:
                    code: 2001
                    message: 3D Secure action required
                    id: 4fad8e2e06a15656
                    paymentId: 22669f90-5bf0-45df-ba8c-ea6d4235a5da
                    actionRequired: true
                    action:
                      type: 3D_SECURE
                      paymentId: 22669f90-5bf0-45df-ba8c-ea6d4235a5da
                      data:
                        clientToken: aaabbb
                        verifyCardPayload: payload
                        psp: BR
                    threeDSecureAction:
                      clientToken: aaabbb
                      verifyCardPayload: payload
                  description: >
                    The content of `$response.body#/action` can be passed to one our
                    [Client SDKs](https://secure.comcarde.com/v1/integration/docs/comcarde-sdks#client-sdks)
                    to be handled and converted into a nonce that can be used to finalise the payment as a
                    `ProviderThreeDSecureNonce` payment instrument.
                    Some Client SDKs might not yet support the use of this 'action' field, in which case the
                    entire response may need to be passed instead. Please refer to SDK documentation to find out more.
                Further action required to make 3D Secure payment with new saved card:
                  value:
                    code: 2001
                    message: 3D Secure action required
                    id: 4fad8e2e06a15656
                    paymentId: 22669f90-5bf0-45df-ba8c-ea6d4235a5da
                    token: 4a0f4f46-addc-4f76-8bad-5ade9e7020fb
                    actionRequired: true
                    action:
                      type: 3D_SECURE
                      paymentId: 22669f90-5bf0-45df-ba8c-ea6d4235a5da
                      data:
                        clientToken: aaabbb
                        verifyCardPayload: payload
                        psp: BR
                    threeDSecureAction:
                      clientToken: aaabbb
                      verifyCardPayload: payload
                  description: >
                    The token field contains a multi-use token representing the newly
                    created saved card. Some PSPs automatically apply 3D Secure authentication to the
                    first payment made using a saved card.


                    The content of `$response.body#/action` can be passed to one our
                    [Client SDKs](https://secure.comcarde.com/v1/integration/docs/comcarde-sdks#client-sdks)
                    to be handled and converted into a nonce that can be used to finalise the payment as a
                    `ProviderThreeDSecureNonce` payment instrument.
                    Some Client SDKs might not yet support the use of this 'action' field, in which case the
                    entire response may need to be passed instead. Please refer to SDK documentation to find out more.
                Redirect Flow Action Response:
                  value:
                    code: 2101
                    message: "Pending: The operation has been accepted for processing and the outcome is not yet known"
                    id: e420b8c90d62feb3
                    paymentId: fae9dad4-7bc4-4b30-a8c0-57f5f091e3b2
                    actionRequired: true
                    action:
                      type: REDIRECT
                      paymentId: fae9dad4-7bc4-4b30-a8c0-57f5f091e3b2
                      data:
                        errorUrl: https://myurl.com/success?bridgePaymentId=fae9dad4-7bc4-4b30-a8c0-57f5f091e3b2
                        provider: IDEAL
                        providerTransactionId: 58-86-168300
                        successUrl: https://myurl.com/success?bridgePaymentId=fae9dad4-7bc4-4b30-a8c0-57f5f091e3b2
                        url: https://r3.girogate.de/ti/dumbdummy?tx=902589716&rs=ziwUjfJ3DyYq2OfvhCvwTzm2yBUp27VK
                    pspId: TRUST
                  description: >
                    The content of `$response.body#/action` can be passed to one our
                    [Client SDKs](https://secure.comcarde.com/v1/integration/docs/comcarde-sdks#client-sdks) which
                    will handle the redirect for you.


                    Some [Payment Instruments](https://secure.comcarde.com/docs/#payment-instrument)
                    use the [BR-DGE Redirect Payment Flow](https://secure.comcarde.com/docs/#redirect-payment-flow)
                    which require shoppers to be redirected to a third party URL.


                    The above example shows the data returned for iDEAL, but the action data will vary
                    depending between Payment Instruments.
        400:
          description: >
            Bad request - the request was in an invalid format or contained invalid information.


            If have any questions about why you are receiving these responses, please contact
            <support@comcarde.com> with the `id` from the response so we track down the individual
            requests on our end.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Bad request with validation errors:
                  value:
                    code: 4000
                    message:  Request Error - The request is invalid
                    id: 4fad8e2e06a15656
                    validationErrors:
                      paymentInstrument.pan: [4030203 - The value entered for Pan is incorrect. It is not a valid card PAN.]
                      paymentInstrument.expiryDate: [4030301 - Expiry Date cannot be blank.]
                  description: >
                    This example shows the [4030203](https://secure.comcarde.com/v1/integration/docs/comcarde-validation-errors#4030203),
                    and [4030301](https://secure.comcarde.com/v1/integration/docs/comcarde-validation-errors#4030301)
                    **Comcarde Validation Errors**.


                    Please see <https://secure.comcarde.com/v1/integration/docs/comcarde-validation-errors>
                    for a full list of **Comcarde Validation Errors**.
        401:
          description: Unauthorized request.
        500:
          description: >
            An internal server error was encountered while processing the payment request.


            If have any questions about why you are receiving these responses, please contact
            <support@comcarde.com> with the `id` from the response so we track down the individual
            requests on our end.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Internal server error:
                  value:
                    code: 5001
                    message:  Server Error - An unexpected error occurred when processing the request
                    id: 4fad8e2e06a15656
                  description: >
                    This example shows the [5001 Comcarde Response Code](https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes#5001).


                    Please see <https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes>
                    for a full list of **Comcarde Response Codes**.
        502:
          description: >
            An error occurred upstream while processing the payment request, possibly on payment
            processor.


            If have any questions about why you are receiving these responses, please contact
            <support@comcarde.com> with the `id` from the response so we track down the individual
            requests on our end.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Payment processor network error:
                  value:
                    code: 5301
                    message:  Network Error - Payment processor unavailable
                    id: 4fad8e2e06a15656
                  description: >
                    This example shows the [5301 Comcarde error code](https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes#5301).


                    Please see <https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes> for a full list of error codes.
      x-codegen-request-body-name: payment
  /v1/payment-instruments:
    post:
      tags:
        - "Payment Instrument Tokenization"
        - "Merchant Client Application"
      summary: "Create a saved card"
      description: >
        Further streamline your checkout experience by securely storing customer card details in BR-DGE to
        save them having to re-enter cardholder details in future.


        Please see <https://secure.comcarde.com/v1/integration/docs/saved-cards> for more information.
      operationId: "tokenizeInstrument"
      security:
        - "ClientApiKey": []
      requestBody:
        description: "Card payment instrument to be tokenized"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardholderData"
            examples:
              'Cardholder data':
                summary: 'Cardholder data'
                description: |
                  *Please note that we cannot store CVV values with saved cards.*
                value:
                  type: "card"
                  nameOnCard: "John F Doe"
                  pan: "4444 3333 2222 1111"
                  expiryDate: "01-99"
                  startDate: "01-00"
        required: true
      responses:
        201:
          description: "Successful tokenization of payment instrument"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
              examples:
                full card metadata:
                  value:
                    token: 01ed22f0-5f16-47ba-945f-abfacc59777c
                    id: c32d62c2-af44-4efb-8452-38c355bfffb5
                    tokenType: "CARD"
                    cardType: "VISA"
                    nameOnCard: "John Doe"
                    pan: "**** **** **** 1111"
                    expiryDate: "06-30"
                    metadata:
                      cardBrand: "VISA"
                      issuer: "ACMEBANK"
                      type: "DEBIT"
                      category: "CLASSIC"
                      countryIsoA2: "GB"
                      commercial: true
                no metadata:
                  value:
                    token: c3710e80-6fc0-4750-8074-6324f7a8be5c
                    id: c53af59c-b436-4238-b9bc-cc9350b2a2cd
                    tokenType: "CARD"
                    cardType: "VISA"
                    nameOnCard: "John Doe"
                    pan: "**** **** **** 1111"
                    expiryDate: "06-30"
                    metadata: null
                partial card metadata:
                  description: Please note that all fields are nullable
                  value:
                    token: 0c608bb2-5b18-497b-a642-c327d088e20f
                    id: fb095932-2819-4b5d-811f-6adad7cab3cc
                    tokenType: "CARD"
                    cardType: "VISA"
                    nameOnCard: "John Doe"
                    pan: "**** **** **** 1111"
                    expiryDate: "06-30"
                    metadata:
                      cardBrand: null
                      issuer: null
                      type: "CLASSIC"
                      category: null
                      countryIsoA2: null
                      commercial: null
        400:
          description: "Unsuccessful tokenization of payment instrument - bad request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Bad request with validation errors:
                  value:
                    code: 4000
                    message:  Request Error - The request is invalid
                    id: 4fad8e2e06a15656
                    validationErrors:
                      paymentInstrument.pan: [4030203 - The value entered for Pan is incorrect. It is not a valid card PAN.]
                      paymentInstrument.expiryDate: [4030301 - Expiry Date cannot be blank.]
                  description: >
                    This example shows the [4030203](https://secure.comcarde.com/v1/integration/docs/comcarde-validation-errors#4030203),
                    and [4030301](https://secure.comcarde.com/v1/integration/docs/comcarde-validation-errors#4030301)
                    **Comcarde Validation Errors**.


                    Please see <https://secure.comcarde.com/v1/integration/docs/comcarde-validation-errors>
                    for a full list of **Comcarde Validation Errors**.
        500:
          description: "Unsuccessful tokenization of payment instrument - an internal server error occurred"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Internal server error:
                  value:
                    code: 5001
                    message:  Server Error - An unexpected error occurred when processing the request
                    id: 4fad8e2e06a15656
                  description: >
                    This example shows the [5001 Comcarde Response Code](https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes#5001).


                    Please see <https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes>
                    for a full list of **Comcarde Response Codes**.
    get:
      tags:
        - "Payment Instrument Tokenization"
        - "Merchant Server"
      summary: Help your customer's identify their saved cards, without exposing sensitive cardholder data
      operationId: getTokenizedPaymentInstrumentsUsingGET
      description: >
        You can also use this endpoint to query all saved cards for a customer, if a customer identifier
        was provided when cards were saved.


        Note: If multiple query params are provided, ALL will be used to constrain the results returned.
      security:
        - "ServerApiKey": []
      parameters:
        - name: customerId
          in: query
          description: >
            Case-sensitive identifier for your customer.


            Note: Symbols such as back-ticks and carriage returns are not permitted.
          allowEmptyValue: false
          schema:
            type: string
        - name: tokens
          in: query
          description: >
            Comma-separated list of multi-use tokens.


            This is useful if you track associations between your customer's and saved cards yourselves,
            but still want to access obfuscated card details on demand
          allowEmptyValue: false
          schema:
            type: string
        - name: showPanLeadingChars
          in: query
          description: >
            The leading six digits of a cards PAN are the issuer identification number (IIN) sometimes
            referred to as the "bank identification number (BIN)" which may be required for some use cases.


            By default this information is not provided, but you can opt-in by setting this flag to true if
            you specifically need it.


            E.g. `1234 56** **** 7890` instead of the default `**** **** **** 7890`
          schema:
            type: boolean
      responses:
        200:
          description: Map of ObfuscatedCards, keyed by their multi-use token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMapObfuscatedCard'
              examples:
                "with customer ids":
                  value:
                    id: example-response-trace-id
                    results:
                      3d967f3e-8710-4c2b-9828-28b9531617f1:
                        cardType: VISA
                        nameOnCard: John F Doe
                        pan: '**** **** **** 1111'
                        expiryDate: 06-30
                        startDate: 01-20
                        issueNumber: 0
                        customerId: example-customer-id
                        tokenType: "CARD"
                        metadata:
                          cardBrand: "VISA"
                          issuer: "ACMEBANK"
                          type: "DEBIT"
                          category: "CLASSIC"
                          countryIsoA2: "GB"
                          commercial: true
                      a495902c-db67-4ea6-aff8-109101544a50:
                        cardType: MASTERCARD
                        nameOnCard: Jane Doe
                        pan: '**** **** **** 1234'
                        expiryDate: 07-31
                        startDate: 09-21
                        issueNumber: 2
                        customerId: example-customer-id
                        tokenType: "CARD"
                        metadata: null
                      4c5f1e1d-a8d4-403c-8199-e9705da98735:
                        cardType: MASTERCARD
                        nameOnCard: John F Doe
                        pan: '**** **** **** 4321'
                        expiryDate: 02-29
                        startDate: 10-20
                        customerId: example-customer-id
                        tokenType: "CARD"
                        metadata:
                          cardBrand: "MASTERCARD"
                          issuer: null
                          type: "DEBIT"
                          category: null
                          countryIsoA2: "GB"
                          commercial: null
                "no customer ids and showing PAN Leading Chars":
                  value:
                    id: example-response-trace-id
                    results:
                      3d967f3e-8710-4c2b-9828-28b9531617f1:
                        cardType: VISA
                        nameOnCard: John F Doe
                        pan: '1234 46** **** 1111'
                        expiryDate: 06-30
                        startDate: 01-20
                        issueNumber: 0
                        tokenType: "CARD"
                        metadata:
                          cardBrand: "VISA"
                          issuer: "ACMEBANK"
                          type: "DEBIT"
                          category: "CLASSIC"
                          countryIsoA2: "GB"
                          commercial: true
                      a495902c-db67-4ea6-aff8-109101544a50:
                        cardType: MASTERCARD
                        nameOnCard: Jane Doe
                        pan: '**** **** **** 1234'
                        expiryDate: 07-31
                        startDate: 09-21
                        issueNumber: 2
                        tokenType: "CARD"
                        metadata: null
                      4c5f1e1d-a8d4-403c-8199-e9705da98735:
                        cardType: MASTERCARD
                        nameOnCard: John F Doe
                        pan: '**** **** **** 4321'
                        expiryDate: 02-29
                        startDate: 10-20
                        tokenType: "CARD"
                        metadata:
                          cardBrand: "MASTERCARD"
                          issuer: null
                          type: "DEBIT"
                          category: null
                          countryIsoA2: "GB"
                          commercial: null
        400:
          description: >
            Bad request - the request was in an invalid format or contained invalid information.


            If have any questions about why you are receiving these responses, please contact
            <support@comcarde.com> with the `id` from the response so we track down the individual
            requests on our end.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Invalid customer ID:
                  value:
                    code: 4000
                    message: getTokenizedPaymentInstruments.customerId contains invalid characters
                Querying by tokens and customer ID:
                  value:
                    code: 4000
                    message: Querying with both tokens and customerId is not currently supported
        401:
          description: >
            Unauthorized request, please note no response body will be provided.
        500:
          description: >
            An internal server error was encountered while retrieving the tokenized payment
            instruments.


            If have any questions about why you are receiving these responses, please contact
            <support@comcarde.com> with the `id` from the response so we track down the individual
            requests on our end.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Internal error occurred:
                  value:
                    code: 5001
                    message: Server Error - An unexpected error occurred when processing the request
  /v1/payment-instruments/single-use:
    post:
      tags:
        - "Payment Instrument Tokenization"
        - "Merchant Client Application"
      summary: "Tokenize cardholder data or a saved card into a single-use token."
      description: >
        For one off payments you can exchange cardholder data for a single-use token that can be used
        as a payment instrument via the [Tokenized Payment Flow](https://secure.comcarde.com/v1/integration/docs/integration-getting-started#tokenized-payment-flow).


        Saved card multi-use tokens can also be exchanged for single-use tokens. This can be useful
        if you wish to include CVV values in your payments as this data cannot be stored with saved
        cards.

      operationId: "tokenizeSingleUseInstrument"
      security:
        - "ClientApiKey": []
      requestBody:
        description: "Payment instrument to be tokenized (cardholder data or saved card multi-use token)"
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CardholderDataWithOptionalCvv'
                - $ref: '#/components/schemas/TokenizedCardholderData'
            examples:
              'Tokenize cardholder data':
                description: 'Exchange cardholder data for a single-use token'
                value:
                  type: card
                  nameOnCard: John F Doe
                  pan: 4444 3333 2222 1111
                  expiryDate: 01-99
                  startDate: 01-00
              'Tokenize cardholder data with CVV':
                description: 'Exchange cardholder data (and optional CVV) for a single-use token'
                value:
                  type: card
                  nameOnCard: John F Doe
                  pan: 4444 3333 2222 1111
                  expiryDate: 01-99
                  startDate: 01-00
                  issueNumber: 1
                  cv2: '123'
              'multi-use token':
                summary: 'Exchange a saved card multi-use token for a single-use token'
                value:
                  type: "tokenized"
                  token: "b3317c7a-7c91-47d6-a49f-3038ca570212"
              'multi-use token with CVV':
                summary: 'Exchange a saved card multi-use token and CVV for a single-use token'
                description: 'CVVs cannot be stored with multi-use tokens, but you can temporarily associate single use tokens with CVVs'
                value:
                  type: "tokenized"
                  token: "b3317c7a-7c91-47d6-a49f-3038ca570212"
                  cv2: "123"
        required: true
      responses:
        201:
          description: "Successful tokenization of payment instrument"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
              examples:
                full card metadata:
                  value:
                    token: 01ed22f0-5f16-47ba-945f-abfacc59777c
                    id: c32d62c2-af44-4efb-8452-38c355bfffb5
                    tokenType: "CARD"
                    cardType: "VISA"
                    nameOnCard: "John Doe"
                    pan: "**** **** **** 1111"
                    expiryDate: "06-30"
                    metadata:
                      cardBrand: "VISA"
                      issuer: "ACMEBANK"
                      type: "DEBIT"
                      category: "CLASSIC"
                      countryIsoA2: "GB"
                      commercial: true
                no metadata:
                  value:
                    token: c3710e80-6fc0-4750-8074-6324f7a8be5c
                    id: c53af59c-b436-4238-b9bc-cc9350b2a2cd
                    tokenType: "CARD"
                    cardType: "VISA"
                    nameOnCard: "John Doe"
                    pan: "**** **** **** 1111"
                    expiryDate: "06-30"
                    metadata: null
                partial card metadata:
                  description: Please note that all fields are nullable
                  value:
                    token: 0c608bb2-5b18-497b-a642-c327d088e20f
                    id: fb095932-2819-4b5d-811f-6adad7cab3cc
                    tokenType: "CARD"
                    cardType: "VISA"
                    nameOnCard: "John Doe"
                    pan: "**** **** **** 1111"
                    expiryDate: "06-30"
                    metadata:
                      cardBrand: null
                      issuer: null
                      type: "CLASSIC"
                      category: null
                      countryIsoA2: null
                      commercial: null

        400:
          description: "Unsuccessful tokenization of payment instrument - bad request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Bad request with validation errors:
                  value:
                    code: 4000
                    message:  Request Error - The request is invalid
                    id: 4fad8e2e06a15656
                    validationErrors:
                      paymentInstrument.pan: [4030203 - The value entered for Pan is incorrect. It is not a valid card PAN.]
                      paymentInstrument.expiryDate: [4030301 - Expiry Date cannot be blank.]
                  description: >
                    This example shows the [4030203](https://secure.comcarde.com/v1/integration/docs/comcarde-validation-errors#4030203),
                    and [4030301](https://secure.comcarde.com/v1/integration/docs/comcarde-validation-errors#4030301)
                    **Comcarde Validation Errors**.


                    Please see <https://secure.comcarde.com/v1/integration/docs/comcarde-validation-errors>
                    for a full list of **Comcarde Validation Errors**.
        500:
          description: "Unsuccessful tokenization of payment instrument - an internal server error occurred"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Internal server error:
                  value:
                    code: 5001
                    message:  Server Error - An unexpected error occurred when processing the request
                    id: 4fad8e2e06a15656
                  description: >
                    This example shows the [5001 Comcarde Response Code](https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes#5001).


                    Please see <https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes>
                    for a full list of **Comcarde Response Codes**.
  /v1/payment-instruments/{token}:
    delete:
      tags:
        - "Payment Instrument Tokenization"
        - "Merchant Client Application"
        - "Merchant Server"
      summary: "Delete a saved card"
      operationId: "deleteTokenizeInstrument"
      security:
        - "ClientApiKey": []
        - "ServerApiKey": []
      parameters:
        - name: token
          in: path
          description: "Multi-use token associated with the saved card to be deleted"
          required: true
          schema:
            type: "string"
      responses:
        400:
          description: "Unsuccessful deletion of saved card - bad request"
        500:
          description: "Unsuccessful deletion of saved card - an internal server error occurred"
        200:
          description: "Successful deletion of saved card"
  /v1/payments/{paymentId}/status:
    get:
      tags:
        - "Payments"
        - "Merchant Server"
      summary: Returns the status of a payment
      operationId: getPaymentStatusUsingGET
      security:
        - "ServerApiKey": []
      parameters:
        - name: paymentId
          in: path
          description: >
            The unique identifier for the payment.


            This can be sourced from the `paymentId` field in the response we sent to you when creating the payment.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentStatusResponse'
              examples:
                Payment was successful:
                  value:
                    comcardeCode:
                      code: 1000
                      description: Approved
                    paymentId: 5d99d5b0-d2a9-4e75-afc2-ec9d6045bad5
                Payment not found:
                  value:
                    comcardeCode:
                      code: 4406
                      description: Payment not found
                    paymentId: 5d99d5b0-d2a9-4e75-afc2-ec9d6045bad5
        400:
          description: >
            Bad request - the request was in an invalid format or contained invalid information.


            If have any questions about why you are receiving these responses, please contact
            <support@comcarde.com> with the `id` from the response so we track down the individual
            requests on our end.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Bad request with validation errors:
                  value:
                    code: 4000
                    message:  Request Error - The request is invalid
                    id: 4fad8e2e06a15656
                    validationErrors:
                      paymentId: ["4130103 - The value entered for Payment ID is incorrect. A valid example has this format: 00000000-0000-0000-0000-000000000000"]
                  description: >
                    This example shows the [4130103](https://secure.comcarde.com/v1/integration/docs/comcarde-validation-errors#4130103)
                    **Comcarde Validation Error**.


                    Please see <https://secure.comcarde.com/v1/integration/docs/comcarde-validation-errors>
                    for a full list of **Comcarde Validation Errors**.
        401:
          description: Unauthorized request.
        500:
          description: >
            An internal server error was encountered while processing the payment status request.


            If have any questions about why you are receiving these responses, please contact
            <support@comcarde.com> with the `id` from the response so we track down the individual
            requests on our end.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Internal server error:
                  value:
                    code: 5001
                    message:  Server Error - An unexpected error occurred when processing the request
                    id: 4fad8e2e06a15656
  /v1/payments/{paymentId}/refund:
    post:
      tags:
        - "Payments"
        - "Merchant Server"
      summary: Initiates a new refund.
      operationId: createRefundUsingPOST
      security:
        - "ServerApiKey": []
      parameters:
        - name: paymentId
          in: path
          description: >
            The unique identifier for the payment to be refunded.


            This can be sourced from the `paymentId` field in the response we sent to you when creating the payment.
          required: true
          schema:
            type: string
      requestBody:
        description: Details of the refund to be initiated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Refund'
            examples:
              partial-refund:
                summary: Partial Refund (original payment > 1000)
                value: |
                  {
                    "amount": 1000
                  }
              full-refund:
                summary: Full Refund
                value: null
        required: false
      responses:
        201:
          description: Refund request completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Successful refund:
                  value:
                    code: 1000
                    message: Approved
                    id: 4fad8e2e06a15656
        400:
          description: >
            Bad request - the request was in an invalid format or contained invalid information.


            If have any questions about why you are receiving these responses, please contact
            <support@comcarde.com> with the `id` from the response so we track down the individual
            requests on our end.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Bad request with validation errors:
                  value:
                    code: 4000
                    message:  Request Error - The request is invalid
                    id: 4fad8e2e06a15656
                    validationErrors:
                      paymentInstrument.pan: [4070104 - The value entered for Amount is incorrect. Please enter an amount that is a whole number with no more than 15 digits.]
                  description: >
                    This example shows the [4070104](https://secure.comcarde.com/v1/integration/docs/comcarde-validation-errors#4070104)
                    **Comcarde Validation Error**.


                    Please see <https://secure.comcarde.com/v1/integration/docs/comcarde-validation-errors>
                    for a full list of **Comcarde Validation Errors**.
                Bad request with unknown payment:
                  value:
                    code: 4405
                    message:  Refund Error - Cannot find successful transaction for refund
                    id: 4fad8e2e06a15656
                  description: >
                    This example shows the [4405](https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes#4405)
                    **Comcarde Response Code**.


                    Please see <https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes>
                    for a full list of **Comcarde Response Codes**.
        401:
          description: Unauthorized request.
        500:
          description: >
            An internal server error was encountered while processing the refund refund request.


            If have any questions about why you are receiving these responses, please contact
            <support@comcarde.com> with the `id` from the response so we track down the individual
            requests on our end.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Internal server error:
                  value:
                    code: 5001
                    message:  Server Error - An unexpected error occurred when processing the request
                    id: 4fad8e2e06a15656
                  description: >
                    This example shows the [5001](https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes#5001)
                    **Comcarde Response Code**.


                    Please see <https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes>
                    for a full list of **Comcarde Response Codes**.
        502:
          description: >
            An error occurred upstream while processing the refund request, possibly on payment processor.


            If have any questions about why you are receiving these responses, please contact
            <support@comcarde.com> with the `id` from the response so we track down the individual
            requests on our end.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComcardeResponse'
              examples:
                Payment processor network error:
                  value:
                    code: 5301
                    message:  Network Error - Payment processor unavailable
                    id: 4fad8e2e06a15656
                  description: >
                    This example shows the [5301](https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes#5301)
                    **Comcarde Response Code**.


                    Please see <https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes>
                    for a full list of **Comcarde Response Codes**.
      x-codegen-request-body-name: refund
components:
  schemas:
    Action:
      title: Action
      type: object
      properties:
        type:
          type: string
          description: >-
            Value indicating the type of this post-response action.
          example: 3D_SECURE
        paymentId:
          type: string
          description: >-
            The ID of the payment that this post-response action relates to.
          example: "57f7f444-29ce-4230-8c7f-1c1fd85c8bc9"
        data:
          type: object
          additionalProperties:
            type: string
          description: A map that contains key/value pairs representing data needed to process this post-response action.
    Address:
      title: Address
      required:
        - address1
        - country
        - town
      type: object
      properties:
        firstName:
          maxLength: 255
          minLength: 0
          type: string
          description: |-
            First name of the occupant.

            Please use only letters, spaces and these symbols: `-'.`
          example: John
        lastName:
          maxLength: 255
          minLength: 0
          type: string
          description: |-
            Last name of the occupant.

            Please use only letters, spaces and these symbols: `-'.`
          example: Smith
        buildingNumberOrName:
          maxLength: 100
          minLength: 0
          type: string
          example: 10a
          description: |-
            The building number or name.

            Providing a building number or name separate from `address1` is recommended as
            some payment service provider (PSP) APIs have a separate field.

            If you are unsure whether you need to collect this data, please contact us at <support@comcarde.com>.

            Please use only letters, spaces and these symbols: `-'.`
        address1:
          maxLength: 255
          minLength: 1
          type: string
          description: |-
            First line of the address.

            Please use only letters, numbers, spaces and these symbols: `'[]()@?!\-/.,_&*:;+=`
          example: Flat 1
        address2:
          maxLength: 255
          minLength: 0
          type: string
          description: |-
            Second line of the address.

            Please use only letters, numbers, spaces and these symbols: `'[]()@?!\-/.,_&*:;+=`
          example: Victoria House
        address3:
          maxLength: 255
          minLength: 0
          type: string
          description: |-
            Third line of the address.

            Please use only letters, numbers, spaces and these symbols: `'[]()@?!\-/.,_&*:;+=`
          example: 15 Apple Street
        town:
          maxLength: 255
          minLength: 1
          type: string
          description: |-
            Town of the address.

            Please use only letters, numbers, spaces and these symbols: `'[]()@?!\-/.,_&*:;+=`
          example: Edinburgh
        county:
          maxLength: 255
          minLength: 0
          type: string
          description: |-
            County of the address.

            Please use only letters, numbers, spaces and these symbols: `'[]()@?!\-/.,_&*:;+=`
          example: Lothian
        postcode:
          type: string
          description: |-
            Postcode of the address.

            Please use at least one and no more than 9 alphanumeric characters (excl. spaces).
          example: BH23 6AA
        country:
          type: string
          description: ISO Alpha-2 Country code of the address.
          example: GB
        phoneNumber:
          maxLength: 255
          minLength: 0
          pattern: ^$|^[+]?[0-9 ]+[0-9]$
          type: string
          description: |-
            Telephone number of the occupant
            Please use only numbers, spaces and this symbol: `+`
          example: +44 123 1110000
    ApplePay:
      title: ApplePay
      description: >
        A type of
        [Payment Instrument](https://secure.comcarde.com/docs/#payment-instrument)
      required:
        - nonce
        - type
      type: object
      properties:
        type:
          type: string
          description: Type of payment instrument.
          example: applePay
          enum:
            - applePay
        nonce:
          maxLength: 255
          minLength: 0
          type: string
          description: Nonce value that represents the details of the ApplePay payment.
          example: BR#00000000-0000-0000-0000-000000000000
    BrowserData:
      title: BrowserData
      description: >
        Information about the browser used to collect payment details. Some of our
        [Client SDKs](https://secure.comcarde.com/v1/integration/docs/comcarde-sdks#client-sdks) provide helper
        methods to generate this data for you.


        This data is required by some Payment Service Providers as part of their 3D Secure flow.
        If you are unsure whether you need to collect this data, please contact us at <support@comcarde.com>.
      type: object
      properties:
        acceptHeader:
          type: string
          description: >
            Exact content of the HTTP accept headers as sent to the merchant from the cardholders
            browser.
          example: application/json
        colorDepth:
          type: string
          description: Value representing the bit depth of the color palette for displaying
            images, in bits per pixel. Obtained from cardholder browser using the
            screen color depth property.
          example: "32"
        javaEnabled:
          type: boolean
          description: Boolean that represents the ability of the cardholder browser
            to execute java. Value is returned from the navigator java enabled property.
          example: true
        language:
          type: string
          description: Value representing the browser language as defined in IETF
            BCP47. Returned from navigator language property.
          example: en-GB
        screenHeight:
          type: integer
          description: "Total height of the cardholders screen in pixels.\
            \ Value is returned from the screen height property."
          format: int32
          example: 768
        screenWidth:
          type: integer
          description: "Total width of the cardholders screen in pixels.\
            \ Value is returned from the screen width property."
          format: int32
          example: 1024
        timeZone:
          type: integer
          description: Time difference between UTC time and the cardholder browser
            local time, in minutes.
          format: int32
          example: 800
        userAgent:
          type: string
          description: Exact content of the HTTP user-agent header, as sent to the merchant from the cardholders browser.
          example: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML,
            like Gecko) Chrome/67.0.3396.99 Safari/537.36
    Card:
      title: Card
      description: >
        A type of
        [Payment Instrument](https://secure.comcarde.com/docs/#payment-instrument)
        representing a credit or debit payment card.
      required:
        - expiryDate
        - pan
        - type
      type: object
      properties:
        type:
          type: string
          enum:
            - card
        nameOnCard:
          maxLength: 45
          minLength: 2
          pattern: ^([A-Z 0-9 a-z-'.]*)$
          type: string
          description: |-
            Name on the credit or debit card
            Please use only letters, numbers, spaces and these symbols: -'.
          example: John F Doe
        pan:
          type: string
          description: PAN of the credit or debit card.
          example: 4444 3333 2222 1111
        expiryDate:
          type: string
          description: Expiry date of the credit or debit card.
          example: 01-99
        startDate:
          type: string
          description: Start date of the credit or debit card.
          example: 01-00
        issueNumber:
          maximum: 9
          minimum: 1
          type: integer
          description: Issue number of the credit or debit card.
          format: int32
          example: 1
        cv2:
          pattern: ^[0-9]*$
          type: string
          description: |-
            CV2 of the credit or debit card
            Please use only numbers
          example: "123"
        tokenize:
          type: boolean
          description: If true, then a saved card will be created.
          example: false
    ComcardeCode:
      title: ComcardeCode
      type: object
      properties:
        code:
          type: string
          example: 1000
          description: A unique identifier covering the outcome of the request.
        description:
          type: string
          description: A description of the outcome of the request.
    ComcardeResponse:
      title: ComcardeResponse
      type: object
      properties:
        action:
          $ref: '#/components/schemas/Action'
        actionRequired:
          type: boolean
          description: >-
            Boolean value indicating whether further action should be taken after the response is received.
          example: true
        code:
          type: string
          description: >-
            [Comcarde Response Code](https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes) signifying the outcome of the request.
          example: "1000"
        id:
          type: string
          description: >
            The ID of this request. If you can include these when querying the outcome
            of individual requests, we can track down the root cause faster.
          example: a7f45953-1e8b-4f33-87b0-3293f4f6972f
        installmentsPlan:
          $ref: '#/components/schemas/InstallmentsPlan'
        message:
          type: string
          description: A description of the outcome of the request.
        paymentId:
          type: string
          description: The ID of this payment
          example: 57f7f444-29ce-4230-8c7f-1c1fd85c8bc9
        threeDSecureAction:
          type: object
          additionalProperties:
            type: string
          description: >
            An object that contains values used to continue a 3D Secure payment.


            Note: this field is now deprecated, and the 'action' field should be used instead.
          deprecated: true
        token:
          type: string
          description: >
            Multi-use token for saved card, if the request asked for one
            to be created.
          example: 7685edd8-006b-4526-85ce-c8b31addcea6
        validationErrors:
          type: object
          additionalProperties:
            type: string
          description: An object that contains validation errors
    GooglePay:
      title: GooglePay
      description: >
        A type of
        [Payment Instrument](https://secure.comcarde.com/docs/#payment-instrument)
      required:
        - nonce
        - type
      type: object
      properties:
        type:
          type: string
          enum:
            - googlePay
        nonce:
          maxLength: 255
          minLength: 0
          type: string
          description: Nonce value that represents the details of the GooglePay payment.
          example: BR#00000000-0000-0000-0000-000000000000
    InstallmentsPlan:
      title: InstallmentsPlan
      description: >
        Information about any Installments Plan was that was linked to the payment
        request and the outcome of its activation or acceptance.
      type: object
      properties:
        code:
          type: string
          description: >
            [Comcarde Response Code](https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes)
            signifying the outcome of the request.
          example: 1000
        message:
          type: string
          description: A description of the outcome of the request.
          example: Approved
        planActivationId:
          type: string
          description: >
            Unique code that identifies the acceptance or activation of the installments plan. This code
            comes from the installments plan provider, not from BR-DGE.
          example: 6ccc5c91-f869-4063-9368-40b4cb30c6ce
        provider:
          type: string
          description: >
            Full name of the provider of this installments plan.
          example: Visa Installments
    Ideal:
      title: iDEAL
      description: >
        A type of [Payment Instrument](https://secure.comcarde.com/docs/#payment-instrument).


        *Please note: iDEAL is only available in the Netherlands therefore `currencyCode` must
        be set to `EUR` and `billingAddress.country` must be set to `NL`,
        otherwise payments may fail.*
      required:
        - type
      type: object
      properties:
        type:
          type: string
          enum:
            - ideal
        successUrl:
          type: string
          maxLength: 300
          minLength: 2
          example: https://myurl.com/success/f219ea52-d91f-4059-a560-8dd7cbd31fd0
          description: >
            URL that your customer's browser will be redirected to after they successfully
            authorize a payment via iDEAL.


            By using unpredictable single-use URLs you can protect
            yourself from the possibility of bad actors attempting to
            make it appear that payments had a different outcome to reality.
            We also recommend that you confirm the outcome of payments via
            server-to-server calls to BR-DGE.
        errorUrl:
          type: string
          maxLength: 300
          minLength: 2
          example: https://myurl.com/error/a73fba88-7874-4d2f-b946-27cfade80be0
          description: >
            URL that your customer's browser will be redirected to if an error occurs, or
            if your customer decides to cancel after they have been redirected to iDEAL.


            By using unpredictable single-use URLs you can protect
            yourself from the possibility of bad actors attempting to
            make it appear that payments had a different outcome to reality.
            We also recommend that you confirm the outcome of payments via
            server-to-server calls to BR-DGE.
    Bancontact:
      title: Bancontact
      description: >
        A type of [Payment Instrument](https://secure.comcarde.com/docs/#payment-instrument).


        *Please note: Bancontact is only available in Belgium therefore `currencyCode`
        must be set to `EUR` and `billingAddress.country` must be set to `BE`,
        otherwise payments may fail.*
      required:
        - type
      type: object
      properties:
        type:
          type: string
          enum:
            - bancontact
        successUrl:
          type: string
          maxLength: 300
          minLength: 2
          example: https://myurl.com/success/92ef8835-3803-41b1-8958-f89bef4e5465
          description: >
            URL that your customer's browser will be redirected to after they successfully
            authorize a payment via Bancontact.


            By using unpredictable single-use URLs you can protect
            yourself from the possibility of bad actors attempting to
            make it appear that payments had a different outcome to reality.
            We also recommend that you confirm the outcome of payments via
            server-to-server calls to BR-DGE.
        errorUrl:
          type: string
          maxLength: 300
          minLength: 2
          example: https://myurl.com/error/54a55814-f488-4b7d-8a27-00b604773246
          description: >
            URL that your customer's browser will be redirected to if an error occurs, or
            if your customer decides to cancel after they have been redirected to Bancontact.


            By using unpredictable single-use URLs you can protect
            yourself from the possibility of bad actors attempting to
            make it appear that payments had a different outcome to reality.
            We also recommend that you confirm the outcome of payments via
            server-to-server calls to BR-DGE.
    PayPal:
      title: PayPal
      description: >
        A type of [Payment Instrument](https://secure.comcarde.com/docs/#payment-instrument).
      required:
        - nonce
        - type
      type: object
      properties:
        nonce:
          maxLength: 255
          minLength: 1
          type: string
          description: Nonce value that represents the details of the PayPal payment.
          example: BR#00000000-0000-0000-0000-000000000000
        type:
          type: string
          enum:
            - payPal
    Payment:
      title: Payment
      description: >
        Represents a request to transfer funds between accounts at banks or other financial institutions.
      required:
        - amount
        - currencyCode
        - customerEmail
        - customerFirstName
        - customerOrderCode
        - orderDescription
        - paymentInstrument
      type: object
      properties:
        amount:
          type: integer
          description: Value of the payment specified in the lowest denomination of
            the given currency.
          format: int64
          example: 1000
        billingAddress:
          $ref: '#/components/schemas/Address'
        browserData:
          $ref: '#/components/schemas/BrowserData'
        channel:
          type: string
          enum:
            - web
            - ios
            - android
          example: web
          description: |-
            The type of channel used by the end user for the payment.
            E.g. If your user is using an iOS app to checkout then channel would be `ios`.

            This data is required by some Payment Service Providers as part of their 3D Secure flow.
            If you are unsure whether you need to collect this data, please contact us at
            <support@comcarde.com>.
        currencyCode:
          type: string
          description: Currency code of the payment (ISO 4217)
          example: GBP
        customerEmail:
          maxLength: 254
          minLength: 1
          pattern: ^$|^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
          type: string
          description: Email address of the customer
          example: a@b.com
        customerFirstName:
          maxLength: 255
          minLength: 1
          type: string
          description: |-
            First name of the customer (customerFirstName length plus customerLastName length must be less than 255 characters long)
            Please use only letters, spaces and these symbols: -'.
          example: John
        customerIpAddress:
          pattern: ^$|^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$
          type: string
          description: IP address of the customer
          example: 123.100.100.200
        customerLastName:
          maxLength: 255
          type: string
          description: |-
            Last name of the customer (customerFirstName length plus customerLastName length must be less than 255 characters long)
            Please use only letters, spaces and these symbols: -'.
          example: Smith
        customerOrderCode:
          maxLength: 50
          minLength: 1
          type: string
          description: |-
            The customer's order code
            Please use only letters, numbers, spaces and these symbols:'[]()@?!\-/.,_&*:;+=
          example: ABC123
        customerPhoneNumber:
          maxLength: 255
          minLength: 0
          pattern: ^$|^[+]?[0-9 ]+[0-9]$
          type: string
          description: |-
            Telephone number of the customer
            Please use only numbers, spaces and this symbol: +
          example: +44 123 1110000
        customerSessionId:
          maxLength: 255
          minLength: 0
          type: string
          description: |-
            Session Id of the customer
            Please use only letters, numbers, spaces and these symbols:'[]()@?!\-/.,_&*:;+=
          example: "123456"
        deliveryAddress:
          $ref: '#/components/schemas/Address'
        orderDescription:
          maxLength: 255
          minLength: 1
          type: string
          description: |-
            Description of what the payment is for
            Please use only letters, numbers, spaces and these symbols:'[]()@?!\-/.,_&*:;+=
          example: Taxi fare
        origin:
          type: string
          maxLength: 255
          minLength: 1
          example: https://example-store.org:8080
          description: |-
            The origin URL of the web page used by the end user for the payment,
            if the `channel` is `web`.

            This data is required by some payment service providers (PSPs) as part of their
            3D Secure flow.
            If you are unsure whether you need to collect this data, please contact us at
            <support@comcarde.com>.
        paymentInstrument:
          description: >
            Electronic instrument with which end users of payment systems use to transfer funds
            between accounts at banks or other financial institutions.
          oneOf:
            - $ref: '#/components/schemas/Card'
            - $ref: '#/components/schemas/Tokenized'
            - $ref: '#/components/schemas/PayPal'
            - $ref: '#/components/schemas/ApplePay'
            - $ref: '#/components/schemas/GooglePay'
            - $ref: '#/components/schemas/Ideal'
            - $ref: '#/components/schemas/Bancontact'
            - $ref: '#/components/schemas/ProviderThreeDSecureNonce'
        threeDSecureOptions:
          $ref: '#/components/schemas/ThreeDSecureOptions'
        threeDSecureRequired:
          type: boolean
          description: >
            You can indicate that 3D Secure processing is preferred, usually initializing a 3D Secure authentication flow.


            Note that setting this as true does not guarantee that the payment will end up with successful 3D Secure authentication.
            Also, setting this to false does not guarantee that 3D Secure authentication will not be applied to the payment, as some
            PSPs may choose to apply their own rules around this regardless need to opt-in to 3D Secure authentication on a
            per-payment basis.
          example: true
    PaymentStatusResponse:
      title: PaymentStatusResponse
      description: Last known status of a payment
      type: object
      properties:
        comcardeCode:
          $ref: '#/components/schemas/ComcardeCode'
        paymentId:
          type: string
          description: Payment ID of the payment
          example: 00000000-0000-0000-0000-000000000000
    PaymentStatusCallback:
      title: PaymentStatusCallback
      type: object
      description: |-
        You may receive POST messages to a callback URL configured in your [Merchant Account](https://secure.comcarde.com/v1/integration/docs/integration-getting-started#merchant-account)
        containing a body that conforms to this schema

        ![Callback Overview](callback-overview.png)

        E.g.

        ```json
        {
          "paymentId": "...",
          "comcardeResponseCode": "..",
          "paymentLifecycleCode": "...",
          "merchantAccountId": "...",
          "pspId": "...",
          "statusChangedAfterPspNotification": true
        }
        ```

        For more information on callbacks please see [here](https://secure.comcarde.com/v1/integration/docs/comcarde-rest-api#callbacks).
      properties:
        paymentId:
          type: string
          description: Unique identifer for the payment
          example: 00000000-0000-0000-0000-000000000000
        comcardeCode:
          type: string
          description: >-
            [Comcarde Response Code](https://secure.comcarde.com/v1/integration/docs/comcarde-response-codes)
            signifying the outcome of the request
          example: "1000"
        paymentLifecycleCode:
          type: string
          description: Provides additional context as to the kind of event that occurred
          example: AUTHORIZATION_SUCCEEDED
          enum:
            - AUTHORIZATION_PENDING
            - AUTHORIZATION_PENDING_3D_SECURE_AUTHENTICATION_ACTION_REQUIRED
            - AUTHORIZATION_PENDING_3D_SECURE_AUTHENTICATION_PENDING
            - AUTHORIZATION_SUCCEEDED
            - AUTHORIZATION_FAILED
            - AUTHORIZATION_SUCCEEDED_CAPTURE_PENDING
            - AUTHORIZATION_SUCCEEDED_CAPTURE_FAILED
            - CAPTURE_PENDING
            - CAPTURE_SUCCEEDED
            - CAPTURE_FAILED
            - VOID_PENDING
            - VOID_SUCCEEDED
            - VOID_FAILED
            - REFUND_PENDING
            - REFUND_SUCCEEDED
            - REFUND_FAILED
            - UNKNOWN
        merchantAccountId:
          type: string
          description: Identifier of the merchant account associated with the payment
          example: 00000000-0000-0000-0000-000000000000
        pspId:
          type: string
          description: Identifier of the Payment Service Provider (PSP) the payment was routed to
          example: AcmePSP
        statusChangedAfterPspNotification:
          type: boolean
          description: |-
            Indicates that the callback is initiated by a notification from a Payment Service Provider (PSP)
    ProviderThreeDSecureNonce:
      title: ProviderThreeDSecureNonce
      description: |-
        A type of [Payment Instrument].

        Part of the 3D Secure flow. In the event that you get a 3D Secure additional
        action required response to a payment request, you can use one of our
        [Client SDKs] to handle the action and convert it into a nonce you can use to complete the
        payment with a ProviderThreeDSecureNonce Payment Instrument.

        [Client SDKs]: https://secure.comcarde.com/v1/integration/docs/comcarde-sdks#client-sdks
        [Payment Instrument]: https://secure.comcarde.com/docs/#payment-instrument
      required:
        - nonce
        - paymentId
        - type
      type: object
      properties:
        paymentId:
          type: string
          description: Payment ID of the payment
          example: 00000000-0000-0000-0000-000000000000
        type:
          type: string
          description: Type of payment instrument
          example: providerThreeDSecureNonce
          enum:
            - providerThreeDSecureNonce
        nonce:
          maxLength: 255
          minLength: 0
          type: string
          description: Nonce value that represents the details of the payment along with its 3D Secure authentication outcome
          example: BR#00000000-0000-0000-0000-000000000000
    Refund:
      title: Refund
      description: Represents a request to refund all or part of an existing payment
      type: object
      properties:
        amount:
          type: integer
          description: Amount to be refunded on this transaction, or null for full refund
          format: int64
          example: 100
    ThreeDSecureOptions:
      title: ThreeDSecureOptions
      description: >
        Some Payment Service Providers allow you to pass parameters to indicate your preferences
        relating to 3D Secure.


        Note: We cannot guarantee that downstream Payment Service Providers will honour your preferences,
        but we can ensure that your preferences are passed on whenever possible.
      type: object
      properties:
        challengeRequested:
          type: boolean
          description: Indicates whether the payment request should result in a 3D
            Secure challenge and not experience a frictionless flow, if handled by
            a payment service provider that supports this feature.
          example: false
        exemptionRequested:
          type: boolean
          description: Indicates whether the payment request should be considered
            for a 3D Secure exemption, if handled by a payment service provider that
            supports this feature.
          example: false
    Tokenized:
      title: Tokenized
      description: >
        A type of
        [Payment Instrument](https://secure.comcarde.com/docs/#payment-instrument)
        that can be used in place of sensitive cardholder data.
      required:
        - token
        - type
      type: object
      properties:
        token:
          maxLength: 200
          minLength: 1
          type: string
          description: |-
            The token that represents a payment instrument
            Please use only letters, numbers, spaces and these symbols:'[]()@?!\-/.,_&*:;+=
          example: 00000000-0000-0000-0000-000000000000
        type:
          type: string
          description: Type of payment instrument
          example: tokenized
          enum:
            - tokenized
        cv2:
          maxLength: 4
          minLength: 3
          pattern: ^[0-9]*$
          type: string
          description: |-
            Optional CV2 of the Tokenized payment instrument, if you haven't already provided it during the tokenization process.
            Please use only numbers
          example: "123"
    ObfuscatedCard:
      description: >
        Information about card payment instruments. This can be used to help
        cardholders identify which of their cars were used (without becoming PCI sensitive)
        in addition to the metadata providing useful insights for merchants.
      type: object
      properties:
        tokenType:
          type: string
          example: "CARD"
          description: "Always `CARD`"
          enum: ["CARD"]
        cardType:
          type: string
          description: >
            Please use `metadata`.`cardBrand` instead.


            This field is now deprecated and will be removed in a future update.
          example: VISA
          deprecated: true
        nameOnCard:
          type: string
          description: Name on the credit or debit card.
          example: John F Doe
        pan:
          type: string
          description: PAN of the credit or debit card in obfuscated form.
          example: '**** **** **** 1111'
        expiryDate:
          type: string
          description: Expiry date of the credit or debit card.
          example: 06-30
        startDate:
          type: string
          description: Start date of the credit or debit card.
          example: 01-20
        issueNumber:
          type: integer
          description: Issue number of the credit or debit card.
          format: int32
        customerId:
          type: string
          description: >
            ID of the merchant's customer who owns the payment instrument (if available)
          example: example-customer-id
        metadata:
          $ref: '#/components/schemas/CardMetadata'
    ResponseMapObfuscatedCard:
      title: ResponseMapObfuscatedCard
      type: object
      description: Map of saved cards, keyed by their multi-use token.
      properties:
        id:
          type: string
          description: >
            The ID of this request. If you can include these when querying the outcome
            of individual requests, we can track down the root cause faster.
        results:
          type: object
          description: Map of obfuscated cards keyed by multi-use token
          additionalProperties:
            $ref: '#/components/schemas/ObfuscatedCard'
      example:
        id: example-response-trace-id
        results:
          3d967f3e-8710-4c2b-9828-28b9531617f1:
            cardType: VISA
            nameOnCard: John F Doe
            pan: '**** **** **** 1111'
            expiryDate: 06-30
            startDate: 01-20
            issueNumber: 0
            customerId: example-customer-id
            tokenType: "CARD"
            metadata:
              cardBrand: "VISA"
              issuer: "ACMEBANK"
              type: "DEBIT"
              category: "CLASSIC"
              countryIsoA2: "GB"
              commercial: true
          example-token-2:
            cardType: MASTERCARD
            nameOnCard: Jane Doe
            pan: '**** **** **** 1234'
            expiryDate: 07-31
            startDate: 09-21
            issueNumber: 2
            customerId: example-customer-id
            tokenType: "CARD"
            metadata: null
          4c5f1e1d-a8d4-403c-8199-e9705da98735:
            cardType: MASTERCARD
            nameOnCard: John F Doe
            pan: '**** **** **** 4321'
            expiryDate: 02-29
            startDate: 10-20
            customerId: example-customer-id
            tokenType: "CARD"
            metadata:
              cardBrand: "MASTERCARD"
              issuer: null
              type: "DEBIT"
              category: null
              countryIsoA2: "GB"
              commercial: null
    TokenResponse:
      description: >
        A single-use token representing a card payment instrument along with information about
        the card.
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: >
                The ID of this request. If you can include these when querying the outcome
                of individual requests, we can track down the root cause faster.
            token:
              type: "string"
              description: Single-use token
        - $ref: '#/components/schemas/ObfuscatedCard'
    CardMetadata:
      type: object
      description: >
        If a card payment instrument is used then BR-DGE may be able to provide
        metadata about the card


        **Please note: All text will be UPPERCASE and all fields can be null**
      properties:
        cardBrand:
          type: "string"
          example: "MASTERCARD"
          description: "MASTERCARD, VISA, etc"
          nullable: true
        issuer:
          type: "string"
          description: "Name of issuing bank"
          nullable: true
        type:
          type: "string"
          enum:
            - DEBIT
            - CREDIT
            - CHARGE_CARD
          nullable: true
        category:
          type: "string"
          example: "CLASSIC"
          description: "CLASSIC, BUSINESS, MIXED_PRODUCT, etc"
          nullable: true
        countryIsoA2:
          type: string
          description: "ISO 3166 Alpha-2 Country code"
          example: "GB"
          nullable: true
        commercial:
          type: boolean
          description: "Indicates if the card is corporate or retail"
          example: true
          nullable: true
    CardholderData:
      required:
        - 'expiryDate'
        - 'pan'
        - 'type'
      type: 'object'
      description: 'Payment instrument that is a credit or debit card.'
      properties:
        type:
          type: string
          example: "card"
          enum:
            - "card"
          description: "Must be set to card"
        customerId:
          maxLength: 255
          minLength: 1
          pattern: "^([\\p{L}\\p{M} 0-9'\\[\\]()@?!\\-/.,_&*:;+=`]*)$"
          type: "string"
          description: "Identifier for the merchant's customer who owns the payment instrument to be tokenized."
        nameOnCard:
          maxLength: 45
          minLength: 2
          pattern: "^([A-Z 0-9 a-z-'.]*)$"
          type: "string"
          description: "Name on the credit or debit card. This may be required by the payment services provider (PSP)."
          example: "John F Doe"
        pan:
          type: "string"
          description: "PAN of the credit or debit card."
          example: "4444 3333 2222 1111"
        expiryDate:
          type: "string"
          description: "Expiry date of the credit or debit card."
          example: "01-99"
        startDate:
          type: "string"
          description: "Start date of the credit or debit card."
          example: "01-00"
        issueNumber:
          maximum: 9
          minimum: 1
          type: "integer"
          description: "Issue number of the credit or debit card."
          format: "int32"
          example: 1
    CardholderDataWithOptionalCvv:
      type: object
      allOf:
        - $ref: "#/components/schemas/CardholderData"
        - type: object
          properties:
            cv2:
              pattern: "[0-9]*$"
              type: "string"
              description: "CV2 of the credit or debit card."
              example: "123"
    TokenizedCardholderData:
      required:
        - "token"
        - "type"
      type: object
      description: Payment instrument consisting of a token that is a tokenized version
        of another payment instrument
      properties:
        type:
          type: string
          description: "Must be set to tokenized"
          example: "tokenized"
          enum:
            - "tokenized"
        token:
          maxLength: 200
          minLength: 1
          pattern: "^([\\p{L}\\p{M} 0-9'\\[\\]()@?!\\-/.,_&*:;+=`]*)$"
          type: string
          description: The token that represents a payment instrument.
          example: 00000000-0000-0000-0000-000000000000
        cv2:
          maxLength: 4
          minLength: 3
          pattern: "[0-9]*$"
          type: string
          description: CV2 of the Tokenized payment instrument.
          example: '000'
    VisaInstallmentMatchedPlan:
      type: object
      description: >
        Each Installment plan that has been matched against the eligibility
        criteria setup by the plan's issuer. The input for the matching criteria is
        provided by the Seller to Visa either during or after the purchase.
      properties:
        planId:
          type: string
          minLength: 36
          maxLength: 36
          description: Visa-generated identifier for an Installment plan.
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Name of the installment plan. This may not be unique.
        type:
          type: string
          enum:
            - ISSUER_PROMOTION
            - BILATERAL
            - ISSUER_DEFAULT
            - MARKET
          description: >
            - ISSUER_PROMOTION – Consumer-funded
              * Applies a promotional rate as an Installment Funding Fee
                applicable to the Consumer-Funded Installment Plan. An Issuer
                Promotion Plan must have an explicit expiration date.
              * These Installment Plans are available to all Merchant Participants
                to display to Eligible Cardholders
            - BILATERAL – Seller-funded or Consumer-funded
              * Applies an Installment Funding Fee different from Market Rate
                Installment Funding Fee.
              * This Installment Funding Fee is agreed to between an Issuer and
                a Merchant Participant pursuant to a written agreement between
                the Merchant Participant and the Issuer These Installment Plans
                are available only to specific Merchant Participants which have a
                Bilateral Plan with the Issuer pursuant to an agreement with the
                Issuer.
            - ISSUER_DEFAULT – Consumer-funded
              * Applies an Installment Funding Fee applicable to the Consumer-
              Funded Plans.
              * These Installment Plans are available to all Merchant Participants
              to display to Eligible Cardholders.
            - MARKET – Merchant Participant
              * Applies a Market Rate Installment Plan
              * These are standardized Seller Funded Installment Plans
                recommended by Visa for defined tenures that Issuers may
                choose to provide to Eligible Cardholders by opting into Market
                Plans. The Installment Funding Fee payable by a Merchant
                Participant to an Issuer for a Market Plan may vary by country
                and may be revised at Visa’s discretion
        numberOfInstallments:
          type: integer
          minValue: 1
          maxValue: 1000
          description: >
            Maximum number of installments that can be in the Plan Acceptance
            created from this plan.
        installmentFrequency:
          type: string
          enum:
            - WEEKLY
            - BIWEEKLY
            - MONTHLY
            - BIMONTHLY
          description: Supported Tenure Types for a plan.
        termsAndConditions:
          type: object
          description: >
            Terms and Conditions that need to be accepted by consumer before
            the plan acceptance can be created using the Installment plan
            corresponding to this terms and conditions. Plan terms and conditions
            as setup by Issuers in Plan configuration. There may be one terms and
            conditions per language. If there is only one setup, then there will be
            only one item in the array.
          properties:
            url:
              type: string
              maxLength: 1000
              description: >
                A Terms and Conditions HTTPS URL hosted by the Issuer for displaying
                to the cardholder for acceptance when initiating a plan acceptance for
                this plan. This HTTPS URL must not invoke an executable script and
                must point to an HTML page containing terms and conditions text in a
                displayable manner. When provided during onboarding, the URL is
                checked for validity.
            version:
              type: integer
              minValue: 1
              maxValue: 2147483647
              description: >
                Installment Plan Terms and Conditions Version. Version of the Terms &
                Conditions accepted by the consumer. The version is auto-incremented
                every time an update is made to the Plan by the issuer.
            text:
              type: string
              minLength: 1
              maxLength: 2000
              description: Text of the Terms and Conditions for Installment Plan.
            languageCode:
              type: string
              minLength: 3
              maxLength: 3
              description: >
                ISO 639-2 language code for the Terms and Conditions text. See
                <https://www.loc.gov/standards/iso639-2/php/code_list.php> for more
                information.
        promotionInfo:
          type: object
          description: Promotion information shared between the Issuer and Seller.
          properties:
            promotionCode:
              type: string
              minLength: 1
              maxLength: 2
              description: >
                An opaque string (as an external identifier to this plan) provided by the
                issuer to Visa that identifies this Installment plan.

                - Up to 2 alphanumeric characters

                - It is typically shared to the Seller by the Financial Institution/Issuer
                so that it can be passed-in during eligibility checks or plan
                acceptance.
            promotionID:
              type: string
              minLength: 1
              maxLength: 8
              description: >
                An opaque string (as an external identifier) provided by the issuer to
                Visa that identifies a program or promotion that is setup outside of
                Visa Installment Services.

                - Up to 8 alphanumeric characters

                - This identifier is used during plan search or eligibility checks.
            costInfo:
              type: object
              description: A list of applicable seller costs/fees for the Installment plan.
              properties:
                annualPercentageRate:
                  type: integer
                  minValue: 0
                  maxValue: 10000
                  description: >
                    Annual Percentage Rate (APR) as configured by the Issuer during plan
                    creation. This is not used for calculations, but used only for display
                    purposes.

                    - Interest fee rate in percentage applied on Installment payment.

                    - Percentage rate and is a non-negative value.

                    - The percentage value is represented with two implicit decimals.
                    (max 10000) Example: 320 specifies 3.2%

                    - For your calculations, the actual percentage value should be
                    interpreted as follows: `actualPercentageValue =
                    ratePercentage / 100.00`
                feeInfo:
                  type: object
                  description: Fee rate table used to calculate the Seller fees.
                  properties:
                    type:
                      type: string
                      enum:
                        - CONSUMER
                        - CONSUMER_UPFRONT
                      description: Fee types applicable for seller.
                    ratePercentage:
                        type: integer
                        minValue: 0
                        maxValue: 10000
                        description: >
                          Interest fee rate in percentage applied on Installment payment.

                          - Percentage rate and is a non-negative value.
                          - The percentage value is represented with two implicit decimals.
                            (max 10000) Example: 250 specifies 2.5%
                          - For calculations, the actual percentage value should be interpreted
                          as follows: `actualPercentageValue = ratePercentage /
                          100.00`
                    flatFee:
                      type: integer
                      description: >

                        - All Amount fields use a representation in minor units only. For
                        example, in Cents for USD currency

                        - There are no fractional minor units; they are rounded to a whole
                        number of minor units

                        - The currency field contains the number of minor units (per ISO
                        4217). For example, “123112” in USD represents the amount, USD
                        1231.12.
                totalPlanCost:
                  type: integer
                  description: >

                    - All Amount fields use a representation in minor units only. For
                    example, in Cents for USD currency

                    - There are no fractional minor units; they are rounded to a whole
                    number of minor units

                    - The currency field contains the number of minor units (per ISO
                    4217). For example, “123112” in USD represents the amount, USD
                    1231.12.
                totalFees:
                  type: integer
                  description: >
                    - All Amount fields use a representation in minor units only. For
                      example, in Cents for USD currency
                    - There are no fractional minor units; they are rounded to a whole
                    number of minor units
                    - The currency field contains the number of minor units (per ISO
                      4217). For example, “123112” in USD represents the amount, USD
                      1231.12.
                totalUpfrontFees:
                  type: integer
                  description: >
                    - All Amount fields use a representation in minor units only. For
                      example, in Cents for USD currency

                    - There are no fractional minor units; they are rounded to a whole
                      number of minor units

                    - The currency field contains the number of minor units (per ISO
                      4217). For example, “123112” in USD represents the amount, USD
                      1231.12.
                totalRecurringFees:
                  type: integer
                  description: >
                    - All Amount fields use a representation in minor units only. For
                      example, in Cents for USD currency

                    - There are no fractional minor units; they are rounded to a whole
                      number of minor units

                    - The currency field contains the number of minor units (per ISO
                      4217). For example, “123112” in USD represents the amount, USD
                      1231.12.
                firstInstallment:
                  type: object
                  description: Cost details (fee and principal) for the first Installment.
                  properties:
                    installmentFee:
                      type: integer
                      description: >
                        - All Amount fields use a representation in minor units only. For
                        example, in Cents for USD currency

                        - There are no fractional minor units; they are rounded to a whole
                        number of minor units

                        - The currency field contains the number of minor units (per ISO
                        4217). For example, “123112” in USD represents the amount, USD
                        1231.12.
                    amount:
                      type: integer
                      description: >
                        - All Amount fields use a representation in minor units only. For
                          example, in Cents for USD currency

                        - There are no fractional minor units; they are rounded to a whole
                          number of minor units

                        - The currency field contains the number of minor units (per ISO
                          4217). For example, “123112” in USD represents the amount, USD
                          1231.12.
                    upfrontFee:
                      type: integer
                      description: >
                        The consumer upfront fee for this Installment plan and is included only
                        on the first installment.

                        - This fee corresponds to the fee type, CONSUMER_UPFRONT

                        - Conditionality - This is available only on the first Installment.


                        The amount is represented in minor units. It is a numerical value in the
                        minor units of the currency, such as Cents for USD. If the currency is
                        USD, “13400” is used for representing the amount, "$134.00". Note
                        that there are no fractional minor units represented. They're rounded
                        to the whole minor units.
                lastInstallment:
                  type: object
                  description: Cost details (fee and principal) for the last Installment.
                  properties:
                    installmentFee:
                      type: integer
                      description: >
                        - All Amount fields use a representation in minor units only. For
                        example, in Cents for USD currency

                        - There are no fractional minor units; they are rounded to a whole
                        number of minor units

                        - The currency field contains the number of minor units (per ISO
                        4217). For example, “123112” in USD represents the amount, USD
                        1231.12.
                    amount:
                      type: integer
                      description: >
                        - All Amount fields use a representation in minor units only. For
                          example, in Cents for USD currency

                        - There are no fractional minor units; they are rounded to a whole
                          number of minor units

                        - The currency field contains the number of minor units (per ISO
                          4217). For example, “123112” in USD represents the amount, USD
                          1231.12.
      examples:
        - example-1:
          value:
            {
              "vPlanID": "3fa...a6",
              "name": "Plan name",
              "type": "ISSUER_PROMOTION",
              "numberOfInstallments": 0,
              "installmentFrequency": "WEEKLY",
              "termsAndConditions": [
                {
                  "url": "https://dev...sa.com/support",
                  "version": 0,
                  "text": "Sample terms and conditions text",
                  "languageCode": "eng"
                }
              ],
              "promotionInfo": {
                "promotionCode": "A2",
                "promotionID": "MBANK12"
              },
              "costInfo": {
                "annualPercentageRate": 320,
                "feeInfo": [
                  {
                    "type": "CONSUMER",
                    "ratePercentage": 150,
                    "flatFee": 1000
                  },
                  {
                    "type": "UPFRONT_FEES",
                    "ratePercentage": 150
                  }
                ],
                "totalPlanCost": 61299,
                "totalFees": 500,
                "totalUpfrontFees": 100,
                "totalRecurringFees": 20,
                "firstInstallment": {
                  "installmentFee": 123112,
                  "amount": 123112,
                  "upfrontFee": 123112
                },
                "lastInstallment": {
                  "installmentFee": 123112,
                  "amount": 123112
                },
                "currency": "USD"
              }
            }
        - example-2:
          value:
            {
              "vPlanID": "f73676d0-999d-09b7-3581-1963c7c63d02",
              "name": "TestX",
              "type": "ISSUER_DEFAULT",
              "numberOfInstallments": 3,
              "installmentFrequency": "MONTHLY",
              "termsAndConditions": [
                {
                  "url": "",
                  "version": 6,
                  "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
                  "languageCode": "eng"
                }
              ],
              "promotionInfo": {
                "promotionCode": "",
                "promotionID": ""
              },
              "costInfo": {
                "annualPercentageRate": 0,
                "feeInfo": [
                  {
                    "type": "CONSUMER",
                    "ratePercentage": 0,
                    "flatFee": 0
                  },
                  {
                    "type": "CONSUMER_UPFRONT",
                    "ratePercentage": 200,
                    "flatFee": 0
                  }
                ],
                "totalPlanCost": 12592,
                "totalFees": 247,
                "totalUpfrontFees": 247,
                "totalRecurringFees": 0,
                "firstInstallment": {
                  "installmentFee": 0,
                  "amount": 4115,
                  "upfrontFee": 247
                },
                "lastInstallment": {
                  "installmentFee": 0,
                  "amount": 4115
                },
                "currency": "USD"
              }
            }
  securitySchemes:
    "ServerApiKey":
      type: http
      scheme: bearer
      description: >
        **IMPORTANT** Must only be used in your secure server environment.
        [More information](https://secure.comcarde.com/v1/integration/docs/api-keys).
    "ClientApiKey":
      type: http
      scheme: bearer
      description: >
        For use in your client applications.
        [More information](https://secure.comcarde.com/v1/integration/docs/api-keys).
